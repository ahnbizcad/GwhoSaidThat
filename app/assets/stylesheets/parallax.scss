// Magic parallax mixins

@mixin parallax-init($perspective: null, $element: null, $parallax-ios: null) {
  $perspective: if($perspective != null, $perspective, 1);
  $element: if($element != null, $element, "body");
  $parallax-ios: if($parallax-ios != null, $parallax-ios, true);

  @if $element == 'body' {
    @at-root {
      html, body {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
      }
      body {
        @include parallax-init-core($perspective, $parallax-ios);
      }
    }
  }
  @else {
    @if $element == this {
      @include parallax-init-core($perspective, $parallax-ios);
    }
    @else {
      @at-root #{$element} {
        @include parallax-init-core($perspective, $parallax-ios);
      }
    }
  }
}

@mixin parallax-init-core($perspective: null, $parallax-ios: null) {
  $perspective: if($perspective != null, $perspective, toolkit-get('parallax perspective'));
  $parallax-ios: if($parallax-ios != null, $parallax-ios, toolkit-get('parallax ios'));
  
  overflow: auto;
  @if mixin-exists(perspective) {
    @include perspective($perspective * 1px);
  }
  @else {
    -webkit-perspective: $perspective * 1px;
    perspective: $perspective * 1px;
  }
  // Allows for smooth scrolling but disables parallax effects.
  @if $parallax-ios == false {
    -webkit-overflow-scrolling: touch;
  }
  // Make sure 3D perspective is preserved
  // $element passed to parallax-init must exist in DOM.
  &, & * {

      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;

  }
}

@mixin parallax($distance: null, $perspective: null) {
  $distance: if($distance != null, $distance, toolkit-get('parallax distance'));
  $perspective: if($perspective != null, $perspective, toolkit-get('parallax perspective'));
  $transform: translateZ($distance * $perspective * 1px) scale(abs($distance - 1));

    -webkit-transform: $transform;
    transform: $transform;

  z-index: $distance * 100;
}

// End of parallax definition.



@include parallax-init(1, "body", true)




/*
.parallax {
  perspective: 1px;
  height: 100vh;
}

.parallax-layer {
  position: absolute;
  top:    0;
  right:  0;
  bottom: 0;
  left:   0;
}

.parallax-layer-base {
  transform: translateZ(0);
}

.parallax-layer-back {
  transform: translateZ(-1px) scale(2);
}

@mixin parallax-image($image-path) {
  background-image: image-url($image-path);
  background-size: cover;
  background-repeat: no-repeat;
  background-position: top center;
}

#parallax-image-architecture {
  @include parallax-image("blue_architecture_depth.jpg");
}
*/